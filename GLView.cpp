// GLView.cpp: implementation of the CGLView class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "Virtual Robot.h"
#include "GLView.h"
#include "matrix33.h"
#include "point3d.h"
#include "axis.h"
#include "vector3d.h"
#include "joint.h"
#include "link.h"
#include "component.h"
#include "grid.h"


#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////


CGLView::CGLView(CWnd* pWnd) : ptrWnd(pWnd)
{
	xRot = -45.0f;
	yRot = 0.0f;
	zRot = -45.0f;
	xTrans =0.0f ;
		yTrans =-1000.0f ;
		zTrans = -1000.0f;
	icap=1.0;
	jcap=1.0;
	kcap=1.0;
rotval2=0.00;
	rotval1=0.00;
rotval3=0.00;
	rotval=0.00;
	nRange = 2000;

	m_bkRed = 0;
	m_bkGreen = 0;
	m_bkBlue = 0;

	

	m_antialias = false;

	//1
	colorv[0].amb[0] =  0.0F;	colorv[0].amb[1] =  0.0F;	colorv[0].amb[2] =  0.0F;
	colorv[0].diff[0] =  0.1F;	colorv[0].diff[1] =  0.6F;	colorv[0].diff[2] =  0.3F;
	colorv[0].spec[0] =  1.0F;	colorv[0].spec[1] =  1.0F;	colorv[0].spec[2] =  1.0F;
	colorv[0].ratio =  0.75F;
	colorv[0].indexes[0] =  0;	colorv[0].indexes[1] =  0;	colorv[0].indexes[2] =  0;

	//2
	colorv[1].amb[0] =  0.0F;	colorv[1].amb[1] =  0.0F;	colorv[1].amb[2] =  0.0F;
	colorv[1].diff[0] =  0.0F;	colorv[1].diff[1] =  0.2F;	colorv[1].diff[2] =  0.5F;
	colorv[1].spec[0] =  1.0F;	colorv[1].spec[1] =  1.0F;	colorv[1].spec[2] =  1.0F;
	colorv[1].ratio =  0.75F;
	colorv[1].indexes[0] =  0;	colorv[1].indexes[1] =  0;	colorv[1].indexes[2] =  0;

	//3
	colorv[2].amb[0] =  0.0F;	colorv[2].amb[1] =  0.05F;	colorv[2].amb[2] =  0.05F;
	colorv[2].diff[0] =  0.6F;	colorv[2].diff[1] =  0.0F;	colorv[2].diff[2] =  0.8F ;
	colorv[2].spec[0] =  1.0F;	colorv[2].spec[1] =  1.0F;	colorv[2].spec[2] =  1.0F ;
	colorv[2].ratio =  0.75F;
	colorv[2].indexes[0] =  0;	colorv[2].indexes[1] =  0;	colorv[2].indexes[2] =  0 ;

	ZoomON = false;
	PanON = false;
	RotON = false;

	gridOn = false;

	InitGL();

//stuff
axv.SetParam(1,0,0);
ayv.SetParam(0,1,0);
azv.SetParam(0,0,1);
px.SetParam(0,0,0);
py.SetParam(0,0,0);
pz.SetParam(0,0,0);

ax.SetDirection(axv);
ax.SetPosition(px);
ay.SetDirection(ayv);
ay.SetPosition(py);
az.SetDirection(azv);
az.SetPosition(pz);

int i = 0;


vx.SetParam(0,1,0);
vx1.SetParam(0,1,0);
posn.SetParam(-210.1931, 0, 1900.4744);
posn1.SetParam(-210.3066 ,0, 940.5311);
vx0.SetParam(1,0,0);
posn0.SetParam(-1908.6194 ,0 ,2080.7448);
joint2.SetParam(posn1,vx1);
joint1.SetParam(posn,vx);
joint0.SetParam(posn0,vx0);
CPoint3D dsg[56];
g1.SetParam(-1908.6194 ,0 ,2080.7448);
g2.SetParam(-1000.6194,0,2080.7448);


	  c1.Vertex.Append(CPoint3D(-1908.6194, -125, 2179.7448));
      c1.Vertex.Append(CPoint3D(-1968.8297 ,-125 ,2160.1813));
      c1.Vertex.Append(CPoint3D(-2006.0417 ,-125 ,2108.9634));
      c1.Vertex.Append(CPoint3D(-2006.0417 ,-125 ,2045.6545));
      c1.Vertex.Append(CPoint3D(-1968.8297 ,-125 ,1994.4366));
      c1.Vertex.Append(CPoint3D(-1908.6194 ,-125 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1725.4685 ,-125 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1725.4685 ,-125 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1595.3668 ,83.1067 ,2165.451));
      c1.Vertex.Append(CPoint3D(-1595.3668 ,-81.2671, 2165.4514));
      c1.Vertex.Append(CPoint3D(-1684.1217, 83.1067, 2179.7448));
      c1.Vertex.Append(CPoint3D(-1684.1217, -81.2671, 2179.7448));
      c1.Vertex.Append(CPoint3D(-1908.6194, 111.6935 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1968.8297, 111.6935 ,2160.1813));
      c1.Vertex.Append(CPoint3D(-2006.0417, 111.6935 ,2108.9634));
      c1.Vertex.Append(CPoint3D(-2006.0417, 111.6935 ,2045.6545));
      c1.Vertex.Append(CPoint3D(-1968.8297, 111.6935 ,1994.4366));
      c1.Vertex.Append(CPoint3D(-1908.6194, 111.6935 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1684.1217, 83.1067 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1684.1217, -81.2671 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1595.3668, 83.1067 ,1986.7842));
      c1.Vertex.Append(CPoint3D(-1595.3668, -81.2671 ,1986.7842));
      c1.Vertex.Append(CPoint3D(-1785.9288, 111.6935 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1785.9288, 111.6935 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1767.6557, 83.1067 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1767.6557, 83.1067 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1702.3948, -81.2671 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1702.3948, -81.2671 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1908.6194, -91.2713 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1968.8297, -91.2713 ,2160.1813));
      c1.Vertex.Append(CPoint3D(-2006.0417, -91.2713 ,2108.9634));
      c1.Vertex.Append(CPoint3D(-2006.0417, -91.2713 ,2045.6545));
      c1.Vertex.Append(CPoint3D(-1968.8297, -91.2713 ,1994.4366));
      c1.Vertex.Append(CPoint3D(-1908.6194, -91.2713 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1908.6194, 90.7287 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1968.8297, 90.7287 ,2160.1813));
      c1.Vertex.Append(CPoint3D(-2006.0417 ,90.7287 ,2108.9634));
      c1.Vertex.Append(CPoint3D(-2006.0417 ,90.7287 ,2045.6545));
      c1.Vertex.Append(CPoint3D(-1968.8297 ,90.7287 ,1994.4366));
      c1.Vertex.Append(CPoint3D(-1908.6194 ,90.7287 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1816.5597 ,90.7287 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1791.8852 ,52.3698 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1816.5597 ,90.7287 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1815.9787 ,-91.2713 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1791.8852 ,30.759 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1791.8852 ,52.3698 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1791.8852 ,57.5696 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1791.8852 ,86.598 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1818.5237 ,-91.2713 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1791.8852 ,-88.6914 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1819.2795 ,90.7287 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1818.5237 ,-91.2713 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1791.8852 ,90.7287 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1791.8852 ,90.7287 ,1974.8731));
      c1.Vertex.Append(CPoint3D(-1791.8852 ,-91.2713 ,2179.7448));
      c1.Vertex.Append(CPoint3D(-1791.8852 ,-91.2713 ,1974.8731));
//Index face
 int Ind[]= {5, 7, 6, 0, 1, 2, 3, 4, -1,
      10, 11, 9, 8, -1,
      40, 22, 12, 34, -1,
      13, 35, 34, 12, -1,
      29, 1, 0, 28, -1,
      14, 36, 35, 13, -1,
      30, 2, 1, 29, -1,
      15, 37, 36, 14, -1,
      31, 3, 2, 30, -1,
      16, 38, 37, 15, -1,
      32, 4, 3, 31, -1,
      17, 39, 38, 16, -1,
      33, 5, 4, 32, -1,
      53, 23, 25, 19, 27, 41, -1,
      20, 21, 19, 18, -1,
      8, 9, 21, 20, -1,
      22, 23, 17, 16, 15, 14, 13, 12, -1,
      24, 25, 23, 22, -1,
      25, 24, 10, 8, 20, 18, -1,
      26, 27, 19, 21, 9, 11, -1,
      27, 26, 6, 7, -1,
      54, 6, 44, -1,
      26, 45, 44, 6, -1,
      11, 46, 45, 26, -1,
      24, 11, 10, -1,
      22, 40, 52, -1,
      27, 7, 5, -1,
      5, 33, 48, -1,
      27, 49, 41, -1,
      39, 17, 50, -1,
      50, 17, 23, 42, -1,
      25, 18, 19, -1,
      28, 0, 51, -1,
      0, 6, 43, 51, -1,
      46, 11, 24, 47, -1,
      55, 5, 48, -1,
      42, 53, 52, 40, 34, 35, 36, 37, 38, 39, 50, -1,
      52, 53, 41, 49, 55, 54, 44, 45, 46, 47, -1,
      54, 55, 48, 33, 32, 31, 30, 29, 28, 51, 43, -1,
      53, 42, 23, -1,
      54, 43, 6, -1,
      24, 22, 52, 47, -1,
      55, 49, 27, -1,
      55, 27, 5, -1,-2};

for( i=0;Ind[i]!=-2;i++)
{
c1.Index.Append(Ind[i]);
}
	  

	  CPoint3D dsg1[16];
	  
	  dsg1[0].SetParam(-330.0072, 73.8533 ,2134.7751);
      dsg1[1].SetParam(-330.0072 ,31.9501 ,2165.3421);
      dsg1[2].SetParam(-330.0072, -31.7106 ,2165.3421);
      dsg1[3].SetParam(-330.0072, -74.0167 ,2135.162);
      dsg1[4].SetParam(-330.0072, -74.0167 ,2014.8287);
      dsg1[5].SetParam(-330.0072, -31.3076 ,1985.0356);
      dsg1[6].SetParam(-330.0072, 31.5472 ,1985.0356);
      dsg1[7].SetParam(-330.0072 ,73.8533 ,2015.2157);
      dsg1[8].SetParam(-1590.0072, 73.8533 ,2134.7751);
      dsg1[9].SetParam(-1590.0072, 31.9501 ,2165.3421);
      dsg1[10].SetParam(-1590.0072, -31.7106, 2165.3421);
      dsg1[11].SetParam(-1590.0072, -74.0167, 2135.162);
      dsg1[12].SetParam(-1590.0072, -74.0167, 2014.8287);
      dsg1[13].SetParam(-1590.0072, -31.3076, 1985.0356);
      dsg1[14].SetParam(-1590.0072, 31.5472 ,1985.0356);
      dsg1[15].SetParam(-1590.0072, 73.8533 ,2015.2157);
	   		
	  for(i=0;i<16;i++)
	  {
	  c2.Vertex.Append(dsg1[i]);
	  }
	  int Ind1[]={0, 1, 2, 3, 4, 5, 6, 7, -1,
      10, 9, 8, 15, 14, 13, 12, 11, -1,
      8, 9, 1, 0, -1,
      9, 10, 2, 1, -1,
      10, 11, 3, 2, -1,
      11, 12, 4, 3, -1,
      12, 13, 5, 4, -1,
      13, 14, 6, 5, -1,
      14, 15, 7, 6, -1,
      15, 8, 0, 7, -1,-2
	  };

for(i=0;Ind1[i]!=-2;i++)
{
c2.Index.Append(Ind1[i]);
}




	  CPoint3D dsg2[57];
	        
	        dsg2[0].SetParam(-323.0144, 99.9109, 2150.2639);
            dsg2[1].SetParam(-323.0144, 43.7363 ,2204.209);
            dsg2[2].SetParam(-323.0144, -44.5382 ,2204.209);
            dsg2[3].SetParam(-323.0144, -99.9103 ,2151.0346);
            dsg2[4].SetParam(-323.0144, 99.9109 ,1955.9342);
            dsg2[5].SetParam(-323.0144, -99.9103, 1955.9342);
            dsg2[6].SetParam(-263.2123, -99.9103, 1851.2542);
            dsg2[7].SetParam(-263.2123, 99.9109 ,1851.2542);
            dsg2[8].SetParam(-81.8485 ,-99.9103 ,1912.9057);
            dsg2[9].SetParam(-81.8485 ,99.9109 ,1912.9057);
            dsg2[10].SetParam(-111.5408, -99.9103, 1849.7129);
            dsg2[11].SetParam(-111.5408, 99.9109 ,1849.7129);
            dsg2[12].SetParam(-12.9641 ,99.9109 ,2150.2639);
            dsg2[13].SetParam(-12.9641 ,43.7363 ,2204.209);
            dsg2[14].SetParam(-12.9641 ,-44.5382, 2204.209);
            dsg2[15].SetParam(-12.9641 ,-99.9103, 2151.0346);
            dsg2[16].SetParam(-12.9641 ,99.9109 ,1913.1959);
            dsg2[17].SetParam(-149.3152, 99.9109, 1796.7398);
            dsg2[18].SetParam(-225.7458, 99.9109, 1796.7398);
            dsg2[19].SetParam(-225.7458, -99.9103, 1796.7398);
            dsg2[20].SetParam(-149.3152, -99.9103, 1796.7398);
            dsg2[21].SetParam(-12.9641 ,-99.9103, 1913.1959);
            dsg2[22].SetParam(-150.3836, 99.9109, 1796.7398);
            dsg2[23].SetParam(-210.1931, 99.9109, 1796.7398);
            dsg2[24].SetParam(-12.9641 ,-99.9103, 2006.7283);
            dsg2[25].SetParam(-81.8485 ,-70 ,1912.9057);
            dsg2[26].SetParam(-81.8485 ,70 ,1912.9057);
            dsg2[27].SetParam(-12.9641 ,70 ,1913.1959);
            dsg2[28].SetParam(-12.9641 ,-70, 1913.1959);
            dsg2[29].SetParam(267.5471, 70, 1947.0114);
            dsg2[30].SetParam(267.5471, 70, 1808.9984);
            dsg2[31].SetParam(173.8372, 70, 1808.9984);
            dsg2[32].SetParam(147.8067, 70, 1874.0045);
            dsg2[33].SetParam(267.5471, -70, 1947.0114);
            dsg2[34].SetParam(267.5471, -70, 1808.9984);
            dsg2[35].SetParam(173.8372, -70, 1808.9984);
            dsg2[36].SetParam(147.8067, -70, 1874.0045);
            dsg2[37].SetParam(267.5471, -30, 1947.0114);
            dsg2[38].SetParam(267.5471, 30 ,1947.0114);
            dsg2[39].SetParam(267.5471, -30, 1808.9984);
            dsg2[40].SetParam(267.5471, 30 ,1808.9984);
            dsg2[41].SetParam(173.8372, -30 ,1808.9984);
            dsg2[42].SetParam(173.8372, 30 ,1808.9984);
            dsg2[43].SetParam(147.8067, -30 ,1874.0045);
            dsg2[44].SetParam(147.8067, 30 ,1874.0045);
            dsg2[45].SetParam(20.8448 ,-30 ,1947.0114);
            dsg2[46].SetParam(20.8448 ,-30 ,1874.0045);
            dsg2[47].SetParam(20.8448 ,30 ,1947.0114);
            dsg2[48].SetParam(20.8448 ,30 ,1874.0045);
            dsg2[49].SetParam(-100.127, 70, 1874.0045);
            dsg2[50].SetParam(-12.9641, 70, 1947.0114);
            dsg2[51].SetParam(-100.127, -70, 1874.0045);
            dsg2[52].SetParam(-12.9641, -70, 1947.0114);
            dsg2[53].SetParam(-100.127, 61.387, 1874.0045);
            dsg2[54].SetParam(-12.9641, -38.772, 1947.0114);
            dsg2[55].SetParam(-100.127, -61.387, 1874.0045);
            dsg2[56].SetParam(-12.9641, 38.772, 1947.0114);
	  for(i=0;i<57;i++)
	  {
	  c3.Vertex.Append(dsg2[i]);
	  }
	  
	  int Ind2[]=
	  {
	  17, 20, 19, 18, 23, 22, -1,
      52, 24, 21, 28, -1,
      0, 4, 5, 3, 2, 1, -1,
      4, 0, 12, 16, 9, -1,
      0, 1, 13, 12, -1,
      1, 2, 14, 13, -1,
      2, 3, 15, 14, -1,
      8, 3, 5, 6, 19, 20, 10, -1,
      6, 7, 18, 19, -1,
      7, 6, 5, 4, -1,
      8, 25, 28, 21, -1,
      26, 9, 16, 27, -1,
      49, 11, 9, 26, -1,
      11, 10, 20, 17, -1,
      22, 9, 11, 17, -1,
      9, 22, 23, -1,
      7, 9, 23, 18, -1,
      9, 7, 4, -1,
      8, 21, 24, -1,
      15, 3, 8, 24, -1,
      32, 29, 30, 31, -1,
      36, 33, 52, 28, -1,
      33, 34, 39, 37, -1,
      40, 30, 29, 38, -1,
      34, 35, 41, 39, -1,
      42, 31, 30, 40, -1,
      35, 36, 43, 41, -1,
      44, 32, 31, 42, -1,
      53, 49, 32, 44, 48, -1,
      54, 52, 33, 37, 45, -1,
      27, 32, 49, 26, -1,
      34, 33, 36, 35, -1,
      47, 45, 46, 48, -1,
      44, 38, 47, 48, -1,
      43, 37, 39, 41, -1,
      46, 55, 53, 48, -1,
      56, 54, 45, 47, -1,
      40, 38, 44, 42, -1,
      45, 37, 43, 46, -1,
      36, 51, 55, 46, 43, -1,
      29, 50, 56, 47, 38, -1,
      56, 50, 12, 13, 14, 15, 24, 52, 54, -1,
      10, 11, 49, 53, 55, 51, -1,
      51, 36, 28, 25, -1,
      50, 29, 32, 27, -1,
      16, 12, 50, 27, -1,
      8, 10, 51, 25, -1,-2

	  };

for(i=0;Ind2[i]!=-2;i++)
{
c3.Index.Append(Ind2[i]);
}

	  
	  CPoint3D dsg3[108];
//
dsg3[0].SetParam(-85.6544, 150, 709.1569);
      dsg3[1].SetParam(-177.2325, 150 ,686.0179);
      dsg3[2].SetParam(-269.7865 ,150 ,704.8781);
      dsg3[3].SetParam(-345.0081 ,150, 762.0066);
	  dsg3[4].SetParam(-388.0174 ,150, 846.1027);
      dsg3[5].SetParam(-390.3066 ,150, 940.5311);
      dsg3[6].SetParam(-256.7273 ,150, 1851.4828);
      dsg3[7].SetParam(-225.8457 ,150, 1901.8071);
      dsg3[8].SetParam(-168.1086 ,150, 1914.1618);
      dsg3[9].SetParam(-119.3371 ,150 ,1880.8818);
      dsg3[10].SetParam(-109.7901 ,150 ,1822.6146);
      dsg3[11].SetParam(-109.7901 ,150 ,1248.4584);
      dsg3[12].SetParam(23.7892 ,150 ,950.1538);
      dsg3[13].SetParam(25.8888 ,150 ,855.7211);
      dsg3[14].SetParam(-13.1677, 150 ,769.7179);
      dsg3[15].SetParam(-85.6544, -150 ,709.1569);
      dsg3[16].SetParam(-177.2325 ,-150 ,686.0179);
      dsg3[17].SetParam(-269.7865 ,-150 ,704.8781);
      dsg3[18].SetParam(-345.0081 ,-150 ,762.0066);
      dsg3[19].SetParam(-388.0174 ,-150 ,846.1027);
      dsg3[20].SetParam(-390.3066 ,-150 ,940.5311);
      dsg3[21].SetParam(-256.7273 ,-150 ,1851.4828);
      dsg3[22].SetParam(-225.8457 ,-150 ,1901.8071);
      dsg3[23].SetParam(-168.1086 ,-150 ,1914.1618);
      dsg3[24].SetParam(-119.3371 ,-150 ,1880.8818);
      dsg3[25].SetParam(-109.7901 ,-150 ,1822.6146);
      dsg3[26].SetParam(-109.7901 ,-150 ,1248.4584);
      dsg3[27].SetParam(23.7892 ,-150 ,950.1538);
      dsg3[28].SetParam(25.8888 ,-150 ,855.7211);
      dsg3[29].SetParam(-13.1677, -150 ,769.7179);
      dsg3[30].SetParam(-256.7273, -110 ,1851.4828);
      dsg3[31].SetParam(-256.7273, 110 ,1851.4828);
      dsg3[32].SetParam(-225.8457, -110 ,1901.8071);
      dsg3[33].SetParam(-225.8457, 110 ,1901.8071);
      dsg3[34].SetParam(-168.1086, -110 ,1914.1618);
      dsg3[35].SetParam(-168.1086, 110 ,1914.1618);
      dsg3[36].SetParam(-119.3371, -110, 1880.8818);
      dsg3[37].SetParam(-119.3371, 110 ,1880.8818);
      dsg3[38].SetParam(-109.7901, -110 ,1822.6146);
      dsg3[39].SetParam(-109.7901, 110 ,1822.6146);
      dsg3[40].SetParam(-124.7727, 110 ,1722.6158);
      dsg3[41].SetParam(-139.997 ,110 ,1739.9041);
      dsg3[42].SetParam(-155.0713, 110 ,1752.8702);
      dsg3[43].SetParam(-169.9956, 110 ,1761.5144);
      dsg3[44].SetParam(-184.7699, 110 ,1765.8364);
      dsg3[45].SetParam(-199.3943, 110 ,1765.8364);
      dsg3[46].SetParam(-213.8686, 110 ,1761.5144);
      dsg3[47].SetParam(-228.1929, 110 ,1752.8702);
      dsg3[48].SetParam(-242.3673, 110 ,1739.9041);
      dsg3[49].SetParam(-256.3916, 110 ,1722.6158);
      dsg3[50].SetParam(-270.266 ,110 ,1701.0056);
      dsg3[51].SetParam(-124.7727, -110 ,1722.6158);
      dsg3[52].SetParam(-139.997 ,-110 ,1739.9041);
      dsg3[53].SetParam(-155.0713 ,-110 ,1752.8702);
      dsg3[54].SetParam(-169.9956 ,-110 ,1761.5144);
      dsg3[55].SetParam(-184.7699 ,-110 ,1765.8364);
      dsg3[56].SetParam(-199.3943 ,-110 ,1765.8364);
      dsg3[57].SetParam(-213.8686 ,-110 ,1761.5144);
      dsg3[58].SetParam(-228.1929 ,-110 ,1752.8702);
      dsg3[59].SetParam(-242.3673 ,-110 ,1739.9041);
      dsg3[60].SetParam(-256.3916 ,-110 ,1722.6158);
      dsg3[61].SetParam(-270.266 ,-110 ,1701.0056);
      dsg3[62].SetParam(-109.7901 ,110 ,1701.5561);
      dsg3[63].SetParam(-282.0609 ,110 ,1678.7191);
      dsg3[64].SetParam(-109.7901 ,-110 ,1701.5561);
      dsg3[65].SetParam(-282.0609 ,-110 ,1678.7191);
      dsg3[66].SetParam(-277.6786 ,-110 ,1708.604);
      dsg3[67].SetParam(-109.7901 ,110 ,1744.3006);
      dsg3[68].SetParam(-273.4302 ,-110 ,1737.5761);
      dsg3[69].SetParam(-109.7901 ,110 ,1776.3381);
      dsg3[70].SetParam(-269.997 ,-110 ,1760.9895);
      dsg3[71].SetParam(-109.7901, 110 ,1799.5676);
      dsg3[72].SetParam(-267.3118, -110 ,1779.3014);
      dsg3[73].SetParam(-109.7901, 110 ,1816.1067);
      dsg3[74].SetParam(-265.3066, -110 ,1792.9759);
      dsg3[75].SetParam(-110.4858, 110 ,1826.8611);
      dsg3[76].SetParam(-263.9141, -110 ,1802.472);
      dsg3[77].SetParam(-263.9141, 110 ,1802.472);
      dsg3[78].SetParam(-110.4858, -110 ,1826.8611);
      dsg3[79].SetParam(-265.3066, 110 ,1792.9759);
      dsg3[80].SetParam(-109.7901, -110 ,1816.1067);
      dsg3[81].SetParam(-267.3118, 110 ,1779.3014);
      dsg3[82].SetParam(-109.7901, -110 ,1799.5676);
      dsg3[83].SetParam(-269.997 ,110 ,1760.9895);
      dsg3[84].SetParam(-109.7901 ,-110 ,1776.3381);
      dsg3[85].SetParam(-273.4302 ,110 ,1737.5761);
      dsg3[86].SetParam(-109.7901 ,-110 ,1744.3006);
      dsg3[87].SetParam(-277.6786 ,110 ,1708.604);
      dsg3[88].SetParam(-85.6544 ,-75 ,709.1569);
      dsg3[89].SetParam(-85.6544 ,75 ,709.1569);
      dsg3[90].SetParam(-177.2325 ,-75 ,686.0179);
      dsg3[91].SetParam(-177.2325 ,75 ,686.0179);
      dsg3[92].SetParam(-269.7865 ,-75 ,704.8781);
      dsg3[93].SetParam(-269.7865 ,75 ,704.8781);
      dsg3[94].SetParam(-345.0081 ,-75 ,762.0066);
      dsg3[95].SetParam(-345.0081 ,75 ,762.0066);
      dsg3[96].SetParam(-109.7901 ,-75 ,1248.4584);
      dsg3[97].SetParam(-109.7901 ,75 ,1248.4584);
      dsg3[98].SetParam(23.7892 ,-75 ,950.1538);
      dsg3[99].SetParam(23.7892 ,75 ,950.1538);
      dsg3[100].SetParam(25.8888, -75 ,855.7211);
      dsg3[101].SetParam(25.8888, 75 ,855.7211);
      dsg3[102].SetParam(-13.1677, -75 ,769.7179);
      dsg3[103].SetParam(-13.1677 ,75 ,769.7179);
      dsg3[104].SetParam(-109.7901 ,75 ,1265.8397);
      dsg3[105].SetParam(-371.1579 ,75 ,813.1373);
      dsg3[106].SetParam(-371.1579 ,-75 ,813.1373);
      dsg3[107].SetParam(-109.7901 ,-75 ,1265.8397);

for(i=0;i<108;i++)
	  {
	  c4.Vertex.Append(dsg3[i]);
	  }
	  


int Ind3[]=
{
 11, 5, 6, 7, 8, 9, 10, -1,
      27, 26, 20, 19, 18, 17, 16, 15, 29, 28, -1,
      15, 16, 90, 88, -1,
      91, 1, 0, 89, -1,
      16, 17, 92, 90, -1,
      93, 2, 1, 91, -1,
      17, 18, 94, 92, -1,
      95, 3, 2, 93, -1,
      105, 4, 3, 95, -1,
      19, 20, 5, 4, -1,
      65, 20, 21, 30, 76, 74, 72, 70, 68, 66, -1,
      21, 22, 32, 30, -1,
      33, 7, 6, 31, -1,
      22, 23, 34, 32, -1,
      35, 8, 7, 33, -1,
      23, 24, 36, 34, -1,
      37, 9, 8, 35, -1,
      24, 25, 38, 78, 36, -1,
      39, 10, 9, 37, 75, -1,
      62, 11, 10, 39, 73, 71, 69, 67, -1,
      26, 27, 98, 96, -1,
      99, 12, 11, 97, -1,
      27, 28, 100, 98, -1,
      101, 13, 12, 99, -1,
      28, 29, 102, 100, -1,
      103, 14, 13, 101, -1,
      29, 15, 88, 102, -1,
      89, 0, 14, 103, -1,
      5, 11, 12, 13, 14, 0, 1, 2, 3, 4, -1,
      21, 20, 26, 25, 24, 23, 22, -1,
      51, 64, 62, 40, -1,
      41, 52, 51, 40, -1,
      42, 53, 52, 41, -1,
      43, 54, 53, 42, -1,
      44, 55, 54, 43, -1,
      45, 56, 55, 44, -1,
      46, 57, 56, 45, -1,
      47, 58, 57, 46, -1,
      48, 59, 58, 47, -1,
      49, 60, 59, 48, -1,
      50, 61, 60, 49, -1,
      65, 61, 50, 63, -1,
      65, 66, 61, -1,
      62, 67, 40, -1,
      66, 68, 60, 61, -1,
      67, 69, 41, 40, -1,
      68, 70, 59, 60, -1,
      69, 71, 42, 41, -1,
      70, 72, 58, 59, -1,
      71, 73, 43, 42, -1,
      74, 57, 58, 72, -1,
      75, 44, 43, 73, 39, -1,
      76, 56, 57, 74, -1,
      31, 77, 45, 44, 75, 37, 35, 33, -1,
      56, 76, 30, 32, 34, 36, 78, 55, -1,
      46, 45, 77, 79, -1,
      54, 55, 78, 38, 80, -1,
      47, 46, 79, 81, -1,
      54, 80, 82, 53, -1,
      47, 81, 83, 48, -1,
      53, 82, 84, 52, -1,
      48, 83, 85, 49, -1,
      52, 84, 86, 51, -1,
      49, 85, 87, 50, -1,
      51, 86, 64, -1,
      50, 87, 63, -1,
      5, 20, 65, 63, -1,
      107, 64, 26, 96, -1,
      6, 5, 63, 87, 85, 83, 81, 79, 77, 31, -1,
      25, 26, 64, 86, 84, 82, 80, 38, -1,
      105, 104, 107, 106, -1,
      99, 97, 105, 95, 93, 91, 89, 103, 101, -1,
      106, 107, 96, -1,
      106, 19, 4, 105, -1,
      62, 64, 107, 104, -1,
      97, 104, 105, -1,
      106, 96, 98, 100, 102, 88, 90, 92, 94, -1,
      18, 19, 106, 94, -1,
      11, 62, 104, 97, -1,-2

};
//
for(i=0;Ind3[i]!=-2;i++)
{
c4.Index.Append(Ind3[i]);
}



CPoint3D dsg4[128];
dsg4[0].SetParam(183.973,254.4302,486.8828);
dsg4[1].SetParam(183.973,254.4302,486.8828);
dsg4[2].SetParam(152.3806,254.4302,477.108);
dsg4[3].SetParam(-242.5462,254.4302,477.108);
dsg4[4].SetParam(-263.7442,254.4302,480.3468);
dsg4[5].SetParam(-281.8031,254.4302,491.9106);
dsg4[6].SetParam(-293.6144,254.4302,509.8086);
dsg4[7].SetParam(-361.7052,254.4302,683.1221);
dsg4[8].SetParam(-440.0096,254.4302,872.7859);
dsg4[9].SetParam(-420.8279,254.4302,983.8675);
dsg4[10].SetParam(-357.3701,254.4302,1077.0349);
dsg4[11].SetParam(-261.0288,254.4302,1135.5619);
dsg4[12].SetParam(-149.1001,254.4302,1148.9412);
dsg4[13].SetParam(-41.6783,254.4302,1114.7708);
dsg4[14].SetParam(172.8079,254.4302,869.5159);
dsg4[15].SetParam(190.9205,254.4302,854.358);
dsg4[16].SetParam(202.7459,254.4302,833.9132);
dsg4[17].SetParam(206.8533,254.4302,810.6547);
dsg4[18].SetParam(206.8533,254.4302,774.6839);
dsg4[19].SetParam(206.8533,254.4302,728.903);
dsg4[20].SetParam(206.8533,254.4302,545.7793);
dsg4[21].SetParam(204.5246,254.4302,512.7914);
dsg4[22].SetParam(-242.5462,164.4302,477.108);
dsg4[23].SetParam(-263.7442,164.4302,480.3468);
dsg4[24].SetParam(-281.8031,164.4302,491.9106);
dsg4[25].SetParam(-293.6144,164.4302,509.8086);
dsg4[26].SetParam(-361.7052,164.4302,683.1221);
dsg4[27].SetParam(-440.0096,164.4302,872.7859);
dsg4[28].SetParam(-420.8279,164.4302,983.8675);
dsg4[29].SetParam(-357.3701,164.4302,1077.0349);
dsg4[30].SetParam(-261.0288,164.4302,1135.5619);
dsg4[31].SetParam(-149.1001,164.4302,1148.9412);
dsg4[32].SetParam(-41.6783,164.4302,1114.7708);
dsg4[33].SetParam(172.8079,164.4302,869.5159);
dsg4[34].SetParam(190.9205,164.4302,854.358);
dsg4[35].SetParam(202.7459,164.4302,833.9132);
dsg4[36].SetParam(206.8533,164.4302,810.6547);
dsg4[37].SetParam(206.8533,164.4302,774.6839);
dsg4[38].SetParam(206.8533,164.4302,728.903);
dsg4[39].SetParam(206.8533,164.4302,545.7793);
dsg4[40].SetParam(-157.403,164.4302,477.108);
dsg4[41].SetParam(205.217,164.4302,522.5997);
dsg4[42].SetParam(183.973,190.4256,486.8828);
dsg4[43].SetParam(152.3806,211.535,477.108);
dsg4[44].SetParam(204.5246,176.5903,512.7914);
dsg4[45].SetParam(-68.0475,230.9699,387.7791);
dsg4[46].SetParam(27.6233,250,387.7791);
dsg4[47].SetParam(123.2942,230.9699,387.7791);
dsg4[48].SetParam(204.4,176.7767,387.7791);
dsg4[49].SetParam(258.5932,95.6709,387.7791);
dsg4[50].SetParam(277.6233,-0,387.7791);
dsg4[51].SetParam(258.5932,-95.6709,387.7791);
dsg4[52].SetParam(204.4,-176.7767,387.7791);
dsg4[53].SetParam(123.2942,-230.9699,387.7791);
dsg4[54].SetParam(27.6233,-250,387.7791);
dsg4[55].SetParam(-68.0475,-230.9699,387.7791);
dsg4[56].SetParam(-149.1533,-176.7767,387.7791);
dsg4[57].SetParam(-203.3465,-95.6709,387.7791);
dsg4[58].SetParam(-222.3767,-0,387.7791);
dsg4[59].SetParam(-203.3465,95.6709,387.7791);
dsg4[60].SetParam(-149.1533,176.7767,387.7791);
dsg4[61].SetParam(-203.3465,-95.6709,630.7791);
dsg4[62].SetParam(-222.3767,-0,630.7791);
dsg4[63].SetParam(-203.3465,95.6709,630.7791);
dsg4[64].SetParam(258.5932,95.6709,503.1724);
dsg4[65].SetParam(277.6233,-0,496.246);
dsg4[66].SetParam(258.5932,-95.6709,503.1724);
dsg4[67].SetParam(204.4,-176.7767,522.8971);
dsg4[68].SetParam(-157.0503,-164.9581,630.7791);
dsg4[69].SetParam(123.2942,-230.9699,476.808);
dsg4[70].SetParam(27.6233,-250,476.808);
dsg4[71].SetParam(-68.0475,-230.9699,476.808);
dsg4[72].SetParam(-149.1533,-176.7767,476.808);
dsg4[73].SetParam(-92.0032,-164.9581,630.7791);
dsg4[74].SetParam(204.0677,-176.9988,523.018);
dsg4[75].SetParam(-243.7462,-164.9581,476.808);
dsg4[76].SetParam(-264.9442,-164.9581,480.0468);
dsg4[77].SetParam(-283.0031,-164.9581,491.6106);
dsg4[78].SetParam(-294.8144,-164.9581,509.5086);
dsg4[79].SetParam(-362.9052,-164.9581,682.8221);
dsg4[80].SetParam(-441.2096,-164.9581,872.4859);
dsg4[81].SetParam(-422.0279,-164.9581,983.5675);
dsg4[82].SetParam(-358.5701,-164.9581,1076.7349);
dsg4[83].SetParam(-262.2288,-164.9581,1135.2619);
dsg4[84].SetParam(-150.3001,-164.9581,1148.6412);
dsg4[85].SetParam(-42.8783,-164.9581,1114.4708);
dsg4[86].SetParam(171.6079,-164.9581,869.2159);
dsg4[87].SetParam(189.7205,-164.9581,854.058);
dsg4[88].SetParam(201.5459,-164.9581,833.6132);
dsg4[89].SetParam(205.6533,-164.9581,810.3547);
dsg4[90].SetParam(205.6533,-164.9581,774.3839);
dsg4[91].SetParam(205.6533,-164.9581,728.603);
dsg4[92].SetParam(205.6533,-164.9581,545.4793);
dsg4[93].SetParam(182.773,-254.9581,486.5828);
dsg4[94].SetParam(151.1806,-254.9581,476.808);
dsg4[95].SetParam(-243.7462,-254.9581,476.808);
dsg4[96].SetParam(-264.9442,-254.9581,480.0468);
dsg4[97].SetParam(-283.0031,-254.9581,491.6106);
dsg4[98].SetParam(-294.8144,-254.9581,509.5086);
dsg4[99].SetParam(-362.9052,-254.9581,682.8221);
dsg4[100].SetParam(-441.2096,-254.9581,872.4859);
dsg4[101].SetParam(-422.0279,-254.9581,983.5675);
dsg4[102].SetParam(-358.5701,-254.9581,1076.7349);
dsg4[103].SetParam(-262.2288,-254.9581,1135.2619);
dsg4[104].SetParam(-150.3001,-254.9581,1148.6412);
dsg4[105].SetParam(-42.8783,-254.9581,1114.4708);
dsg4[106].SetParam(171.6079,-254.9581,869.2159);
dsg4[107].SetParam(189.7205,-254.9581,854.058);
dsg4[108].SetParam(201.5459,-254.9581,833.6132);
dsg4[109].SetParam(205.6533,-254.9581,810.3547);
dsg4[110].SetParam(205.6533,-254.9581,774.3839);
dsg4[111].SetParam(205.6533,-254.9581,728.603);
dsg4[112].SetParam(205.6533,-254.9581,545.4793);
dsg4[113].SetParam(203.3246,-254.9581,512.4914);
dsg4[114].SetParam(-157.0503,-164.9581,476.808);
dsg4[115].SetParam(204.0677,-164.9581,523.018);
dsg4[116].SetParam(182.773,-191.2275,486.5828);
dsg4[117].SetParam(151.1806,-212.3368,476.808);
dsg4[118].SetParam(203.3246,-177.4953,512.4914);
dsg4[119].SetParam(-157.403,164.4302,630.7791);
dsg4[120].SetParam(-68.0475,230.9699,477.108);
dsg4[121].SetParam(27.6233,250,477.108);
dsg4[122].SetParam(123.2942,230.9699,477.108);
dsg4[123].SetParam(204.4,176.7767,512.6344);
dsg4[124].SetParam(-149.1533,176.7767,477.108);
dsg4[125].SetParam(205.217,175.5541,522.5997);
dsg4[126].SetParam(-92.0032,164.4302,630.7791);

for(i=0;i<127;i++)
	  {
	  c5.Vertex.Append(dsg4[i]);
	  }


int Ind4[]=
{
5, 6, 18, 19, 20, 0, 1, 2, 3, 4, -1,
      32, 26, 25, 37, 36, 35, 34, 33, -1,
      0, 41, 42, 1, -1,
      1, 42, 121, -1,
      21, 22, 3, 2, -1,
      22, 23, 4, 3, -1,
      23, 24, 5, 4, -1,
      24, 25, 6, 5, -1,
      25, 26, 7, 6, -1,
      26, 27, 8, 7, -1,
      27, 28, 9, 8, -1,
      28, 29, 10, 9, -1,
      29, 30, 11, 10, -1,
      30, 31, 12, 11, -1,
      31, 32, 13, 12, -1,
      32, 33, 14, 13, -1,
      33, 34, 15, 14, -1,
      34, 35, 16, 15, -1,
      35, 36, 17, 16, -1,
      36, 37, 18, 17, -1,
      37, 38, 19, 18, -1,
      124, 19, 38, 40, -1,
      20, 43, 122, -1,
      12, 13, 7, 8, 9, 10, 11, -1,
      26, 32, 31, 30, 29, 28, 27, -1,
      118, 25, 24, 23, 22, 21, 39, -1,
      6, 7, 13, 14, 15, 16, 17, 18, -1,
      49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 44, 45, 46, 47, 48, -1,
      72, 125, 118, 62, 61, 60, 67, -1,
      44, 119, 120, 45, -1,
      45, 120, 121, 46, -1,
      42, 47, 46, 121, -1,
      63, 48, 47, 122, 43, -1,
      48, 63, 64, 49, -1,
      64, 65, 50, 49, -1,
      65, 66, 51, 50, -1,
      117, 51, 66, 73, -1,
      69, 53, 52, 68, -1,
      70, 54, 53, 69, -1,
      71, 55, 54, 70, -1,
      113, 56, 55, 71, -1,
      60, 61, 57, 56, -1,
      61, 62, 58, 57, -1,
      39, 58, 62, 118, -1,
      119, 44, 59, 123, -1,
      63, 124, 40, -1,
      114, 72, 90, 91, -1,
      105, 99, 98, 110, 109, 108, 107, 106, -1,
      116, 115, 92, 93, -1,
      71, 94, 74, 113, -1,
      94, 95, 75, 74, -1,
      95, 96, 76, 75, -1,
      96, 97, 77, 76, -1,
      97, 98, 78, 77, -1,
      98, 99, 79, 78, -1,
      99, 100, 80, 79, -1,
      100, 101, 81, 80, -1,
      101, 102, 82, 81, -1,
      102, 103, 83, 82, -1,
      103, 104, 84, 83, -1,
      104, 105, 85, 84, -1,
      105, 106, 86, 85, -1,
      106, 107, 87, 86, -1,
      107, 108, 88, 87, -1,
      108, 109, 89, 88, -1,
      109, 110, 90, 89, -1,
      110, 111, 91, 90, -1,
      73, 111, 112, 117, -1,
      115, 117, 112, 92, -1,
      84, 85, 79, 80, 81, 82, 83, -1,
      99, 105, 104, 103, 102, 101, 100, -1,
      110, 98, 97, 96, 95, 94, 93, 92, 112, 111, -1,
      78, 79, 85, 86, 87, 88, 89, 90, -1,
      51, 117, 115, -1,
      60, 56, 113, 67, -1,
      66, 65, 114, 73, -1,
      78, 90, 72, 67, -1,
      94, 71, 70, -1,
      91, 111, 73, 114, -1,
      51, 115, 116, -1,
      77, 78, 67, 113, 74, 75, 76, -1,
      69, 94, 70, -1,
      52, 51, 116, 68, -1,
      93, 69, 68, -1,
      69, 93, 94, -1,
      68, 116, 93, -1,
      1, 121, 120, -1,
      20, 19, 124, 43, -1,
      20, 122, 41, 0, -1,
      125, 37, 25, 118, -1,
      47, 42, 41, -1,
      43, 124, 63, -1,
      59, 58, 39, 123, -1,
      40, 125, 72, 114, 65, 64, 63, -1,
      2, 1, 120, -1,
      37, 125, 40, 38, -1,
      41, 122, 47, -1,
      2, 120, 119, -1,
      2, 119, 123, -1,
      21, 2, 123, 39, -1,-2

};

for(i=0;Ind4[i]!=-2;i++)
{
c5.Index.Append(Ind4[i]);
}

CPoint3D dsg5[128];
//

dsg5[0].SetParam(-47.7814,-435.6195,272.0149);
dsg5[1].SetParam(300.5243,-465.2255,272.0149);
dsg5[2].SetParam(300.5243,-385.2893,272.0149);
dsg5[3].SetParam(300.5243,363.743,272.0149);
dsg5[4].SetParam(300.5243,458.4822,272.0149);
dsg5[5].SetParam(-47.7814,437.758,272.0149);
dsg5[6].SetParam(-176.6018,410.2246,272.0149);
dsg5[7].SetParam(-291.3853,345.5908,272.0149);
dsg5[8].SetParam(-381.7239,249.7173,272.0149);
dsg5[9].SetParam(-439.426,131.2975,272.0149);
dsg5[10].SetParam(-459.2595,1.0692,272.0149);
dsg5[11].SetParam(-439.426,-129.1591,272.0149);
dsg5[12].SetParam(-381.7239,-247.5788,272.0149);
dsg5[13].SetParam(-291.3853,-343.4523,272.0149);
dsg5[14].SetParam(-176.6018,-408.0861,272.0149);
dsg5[15].SetParam(-47.7814,-435.6195,102.0149);
dsg5[16].SetParam(300.5243,-465.2255,102.0149);
dsg5[17].SetParam(300.5243,-385.2893,102.0149);
dsg5[18].SetParam(300.5243,363.743,102.0149);
dsg5[19].SetParam(300.5243,458.4822,102.0149);
dsg5[20].SetParam(-47.7814,437.758,102.0149);
dsg5[21].SetParam(-176.6018,410.2246,102.0149);
dsg5[22].SetParam(-291.3853,345.5908,102.0149);
dsg5[23].SetParam(-381.7239,249.7173,102.0149);
dsg5[24].SetParam(-439.426,131.2975,102.0149);
dsg5[25].SetParam(-439.426,-129.1591,102.0149);
dsg5[26].SetParam(-381.7239,-247.5788,102.0149);
dsg5[27].SetParam(-291.3853,-343.4523,102.0149);
dsg5[28].SetParam(-176.6018,-408.0861,102.0149);
dsg5[29].SetParam(541.7884,-329.4247,272.0149);
dsg5[30].SetParam(541.7884,307.8784,272.0149);
dsg5[31].SetParam(621.0607,-311.0693,102.0149);
dsg5[32].SetParam(621.0607,289.5229,102.0149);
dsg5[33].SetParam(-452.5689,45,102.0149);
dsg5[34].SetParam(-452.2432,-45,102.0149);
dsg5[35].SetParam(-459.2595,1.0692,262.9797);
dsg5[36].SetParam(-45.7347,-438.4912,100);
dsg5[37].SetParam(389.333,-471.6566,100);
dsg5[38].SetParam(409.3912,-470.3606,100);
dsg5[39].SetParam(428.302,-463.5492,100);
dsg5[40].SetParam(444.5797,-451.7574,100);
dsg5[41].SetParam(458.3914,-345.6284,100);
dsg5[42].SetParam(479.1089,320.9945,100);
dsg5[43].SetParam(465.2972,430.44,100);
dsg5[44].SetParam(446.0759,452.9781,100);
dsg5[45].SetParam(418.929,464.8301,100);
dsg5[46].SetParam(389.333,463.6053,100);
dsg5[47].SetParam(-45.7347,437.0731,100);
dsg5[48].SetParam(-174.7269,409.3234,100);
dsg5[49].SetParam(-289.6292,344.4659,100);
dsg5[50].SetParam(-380.0431,248.3703,100);
dsg5[51].SetParam(-437.786,129.7331,100);
dsg5[52].SetParam(-437.786,-131.1512,100);
dsg5[53].SetParam(-380.0431,-249.7884,100);
dsg5[54].SetParam(-289.6292,-345.8841,100);
dsg5[55].SetParam(-174.7269,-410.7415,100);
dsg5[56].SetParam(-45.7347,-438.4912,-0);
dsg5[57].SetParam(389.333,-471.6566,-0);
dsg5[58].SetParam(409.3912,-470.3606,-0);
dsg5[59].SetParam(428.302,-463.5492,-0);
dsg5[60].SetParam(444.5797,-451.7574,-0);
dsg5[61].SetParam(458.3914,-345.6284,-0);
dsg5[62].SetParam(644.849,-305.83,-0);
dsg5[63].SetParam(644.849,284.5126,0);
dsg5[64].SetParam(479.1089,320.9945,0);
dsg5[65].SetParam(465.2972,430.44,0);
dsg5[66].SetParam(446.0759,452.9781,0);
dsg5[67].SetParam(418.929,464.8301,0);
dsg5[68].SetParam(389.333,463.6053,0);
dsg5[69].SetParam(-45.7347,437.0731,0);
dsg5[70].SetParam(-174.7269,409.3234,0);
dsg5[71].SetParam(-289.6292,344.4659,0);
dsg5[72].SetParam(-380.0431,248.3703,0);
dsg5[73].SetParam(-437.786,129.7331,0);
dsg5[74].SetParam(-457.6324,-0.7091,0);
dsg5[75].SetParam(-437.786,-131.1512,-0);
dsg5[76].SetParam(-380.0431,-249.7884,-0);
dsg5[77].SetParam(-289.6292,-345.8841,-0);
dsg5[78].SetParam(-174.7269,-410.7415,-0);
dsg5[79].SetParam(621.8604,-310.7368,100);
dsg5[80].SetParam(621.8604,289.5727,100);
dsg5[81].SetParam(644.849,-305.83,50.7009);
dsg5[82].SetParam(644.849,284.5126,50.7009);
dsg5[83].SetParam(-450.6779,45,100);
dsg5[84].SetParam(-450.8936,-45,100);
dsg5[85].SetParam(-457.6324,-0.7091,2.0355);
dsg5[86].SetParam(-562.9746,45,2.0355);
dsg5[87].SetParam(-562.9746,45,97.661);
dsg5[88].SetParam(-554.5375,45,97.661);
dsg5[89].SetParam(-465.1041,45,262.9797);
dsg5[90].SetParam(-562.9746,-45,2.0355);
dsg5[91].SetParam(-562.9746,-45,97.661);
dsg5[92].SetParam(-554.5375,-45,97.661);
dsg5[93].SetParam(-465.1041,-45,262.9797);
dsg5[94].SetParam(-348.6719,45,100);
dsg5[95].SetParam(-450.6779,45,2.0355);
dsg5[96].SetParam(-348.6719,-45,100);
dsg5[97].SetParam(-450.8936,-45,2.0355);
dsg5[98].SetParam(-450.6779,45,49.4177);
dsg5[99].SetParam(-450.8936,-45,49.5179);
dsg5[100].SetParam(-348.6719,45,102.0149);
dsg5[101].SetParam(-452.5689,45,262.9797);
dsg5[102].SetParam(-348.6719,-45,102.0149);
dsg5[103].SetParam(-452.2432,-45,262.9797);
dsg5[104].SetParam(-452.2432,-45,115.4786);
dsg5[105].SetParam(-451.0693,-45,102.0149);
dsg5[106].SetParam(-452.5689,45,121.3642);
dsg5[107].SetParam(-450.8562,45,102.0149);
dsg5[108].SetParam(-472.3416,30,100.3);
dsg5[109].SetParam(-472.3416,-30,100.3);
dsg5[110].SetParam(-553.1099,30,100.3);
dsg5[111].SetParam(-553.1099,-30,100.3);
dsg5[112].SetParam(-472.3416,30,249.6012);
dsg5[113].SetParam(-472.3416,-30,249.6012);
dsg5[114].SetParam(621.0607,-120,102.0149);
dsg5[115].SetParam(621.0607,120,102.0149);
dsg5[116].SetParam(621.8604,120,100);
dsg5[117].SetParam(621.8604,-120,100);
dsg5[118].SetParam(639.4912,120,264.3);
dsg5[119].SetParam(639.4912,-120,264.3);
dsg5[120].SetParam(545.3859,120,264.3);
dsg5[121].SetParam(545.3859,-120,264.3);
dsg5[122].SetParam(439.4912,-120,102.0149);
dsg5[123].SetParam(439.4912,-120,100);
dsg5[124].SetParam(439.4912,120,102.0149);
dsg5[125].SetParam(439.4912,120,100);
dsg5[126].SetParam(639.4912,120,62.1907);
dsg5[127].SetParam(639.4912,-120,62.1907);

for(i=0;i<128;i++)
	  {
	  c6.Vertex.Append(dsg5[i]);
	  }


int Ind5[]=
{
 2, 9, 10, 11, 12, 13, 14, 0, 1, -1,
      105, 102, 25, 34, -1,
      15, 16, 1, 0, -1,
      16, 17, 2, 1, -1,
      17, 31, 29, 2, -1,
      30, 32, 18, 3, -1,
      18, 19, 4, 3, -1,
      19, 20, 5, 4, -1,
      20, 21, 6, 5, -1,
      21, 22, 7, 6, -1,
      22, 23, 8, 7, -1,
      23, 24, 9, 8, -1,
      101, 9, 24, 33, 106, -1,
      103, 11, 10, 35, -1,
      25, 26, 12, 11, -1,
      26, 27, 13, 12, -1,
      27, 28, 14, 13, -1,
      28, 15, 0, 14, -1,
      3, 9, 2, 29, 30, -1,
      124, 18, 32, 115, -1,
      8, 9, 3, 4, 5, 6, 7, -1,
      26, 25, 17, 16, 15, 28, 27, -1,
      121, 29, 31, 114, -1,
      94, 49, 50, 51, 83, -1,
      64, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, -1,
      56, 57, 37, 36, -1,
      57, 58, 38, 37, -1,
      58, 59, 39, 38, -1,
      59, 60, 40, 39, -1,
      60, 61, 41, 40, -1,
      61, 62, 81, 79, 41, -1,
      62, 63, 82, 81, -1,
      63, 64, 42, 80, 82, -1,
      64, 65, 43, 42, -1,
      65, 66, 44, 43, -1,
      66, 67, 45, 44, -1,
      67, 68, 46, 45, -1,
      68, 69, 47, 46, -1,
      69, 70, 48, 47, -1,
      70, 71, 49, 48, -1,
      71, 72, 50, 49, -1,
      72, 73, 51, 50, -1,
      95, 73, 74, 85, -1,
      97, 75, 52, 84, 99, -1,
      75, 76, 53, 52, -1,
      76, 77, 54, 53, -1,
      77, 78, 55, 54, -1,
      78, 56, 36, 55, -1,
      123, 41, 79, 117, -1,
      61, 77, 64, 63, 62, -1,
      48, 49, 42, 43, 44, 45, 46, 47, -1,
      78, 77, 61, 60, 59, 58, 57, 56, -1,
      82, 80, 116, 126, -1,
      98, 95, 86, 87, 88, -1,
      34, 92, 99, 84, 105, -1,
      102, 96, 94, 100, -1,
      85, 90, 86, 95, -1,
      90, 91, 87, 86, -1,
      91, 92, 88, 87, -1,
      89, 88, 112, -1,
      35, 93, 103, -1,
      83, 107, 100, 94, -1,
      106, 89, 101, -1,
      90, 97, 99, 92, 91, -1,
      41, 49, 94, 96, 36, 37, 38, 39, 40, -1,
      51, 73, 95, 98, 83, -1,
      74, 75, 97, 85, -1,
      103, 93, 104, -1,
      102, 105, 84, 96, -1,
      85, 97, 90, -1,
      88, 89, 106, 33, -1,
      55, 36, 96, 84, 52, 53, 54, -1,
      18, 102, 100, 20, 19, -1,
      102, 18, 25, -1,
      10, 9, 101, 35, -1,
      25, 11, 103, 104, 34, -1,
      104, 93, 92, 34, -1,
      35, 101, 89, -1,
      35, 89, 93, -1,
      98, 88, 33, 107, 83, -1,
      21, 20, 100, 107, 33, 24, 23, 22, -1,
      110, 111, 109, 108, -1,
      112, 110, 108, -1,
      113, 112, 108, 109, -1,
      113, 109, 111, -1,
      113, 93, 89, 112, -1,
      92, 93, 113, 111, -1,
      88, 92, 111, 110, -1,
      110, 112, 88, -1,
      118, 120, 121, 119, -1,
      124, 125, 123, 122, -1,
      118, 126, 116, -1,
      118, 119, 127, 126, -1,
      114, 119, 121, -1,
      17, 25, 18, 124, 122, -1,
      30, 29, 121, 120, -1,
      49, 41, 123, -1,
      127, 81, 82, 126, -1,
      115, 116, 125, 124, -1,
      123, 117, 114, 122, -1,
      114, 127, 119, -1,
      31, 17, 122, 114, -1,
      32, 30, 120, 115, -1,
      49, 123, 125, -1,
      117, 79, 81, 127, -1,
      118, 116, 115, -1,
      117, 127, 114, -1,
      42, 49, 125, 116, 80, -1,
      115, 120, 118, -1,-2


};
//

for(i=0;Ind5[i]!=-2;i++)
{
c6.Index.Append(Ind5[i]);
}





//c2.SetParam(dsg1,Ind1,16);
//c3.SetParam(dsg2,Ind2,57);
//c4.SetParam(dsg3,Ind3,108);
//c5.SetParam(dsg4,Ind4,128);
//c6.SetParam(dsg5,Ind5,128);


}

CGLView::~CGLView()
{
	::wglDeleteContext(m_hRC);
	ptrWnd->ReleaseDC(ptrWnd->GetDC());
}

/////////////////////////////////////////////////////////////////////////////
// CGLView drawing

void CGLView::Draw()
{
	// Make the rendering context current
	::wglMakeCurrent(m_hDC,m_hRC);

	// Call to the rendering function
	RenderScene(GL_RENDER);
	
	// Swap our scene to the front
	::SwapBuffers(m_hDC);

	// Allow other rendering contexts to co-exist
	::wglMakeCurrent(m_hDC,NULL);
}

/////////////////////////////////////////////////////////////////////////////

void CGLView::ReSize(int cx, int cy) 
{
	
	// TODO: Add your message handler code here
	::wglMakeCurrent(m_hDC,m_hRC);
			
	GLsizei w, h;
	w = cx;
	h = cy;

	//prevent divide by 0
	if (h==0)
		h=1;
	if(w==0)
		w=1;
	
	::glViewport(0, 0, w, h);

	// Reset coordinate system
	::glMatrixMode(GL_PROJECTION);
	::glLoadIdentity();

	// Ortho Viewing
    if (w <= h) 
		::glOrtho (-nRange-xTrans, nRange-xTrans, -(nRange*h/w)-yTrans,
		(nRange*h/w)-yTrans, -(nRange*5000.0f)-zTrans, (nRange*5000.0f)-zTrans);
	else 
		::glOrtho (-(nRange*w/h)-xTrans, (nRange*w/h)-xTrans, -nRange-yTrans,
		nRange-yTrans, -nRange*5000.0f, nRange*5000.0f);

	::glMatrixMode(GL_MODELVIEW);
	::glLoadIdentity();

	::wglMakeCurrent(NULL,NULL);
}

void CGLView::Refresh()
{
	ptrWnd->Invalidate(FALSE);
	ptrWnd->UpdateWindow();//CTabCtrl
//RenderScene(GL_RENDER);
}

void CGLView::InitGL() 
{
	int nPixelFormat;					// Pixel format index
	m_hDC = ptrWnd->GetDC()->m_hDC;			// Get the Device context

	static PIXELFORMATDESCRIPTOR pfd = {
		sizeof(PIXELFORMATDESCRIPTOR),	// Size of this structure
		1,								// Version of this structure	
		PFD_DRAW_TO_WINDOW |			// Draw to Window (not to bitmap)
		PFD_SUPPORT_OPENGL |			// Support OpenGL calls in window
		PFD_DOUBLEBUFFER,				// Double buffered mode
		PFD_TYPE_RGBA,					// RGBA Color mode
		24,								// Want 24bit color 
		0,0,0,0,0,0,					// Not used to select mode
		0,0,							// Not used to select mode
		0,0,0,0,0,						// Not used to select mode
		32,								// Size of depth buffer
		0,								// Not used to select mode
		0,								// Not used to select mode
		PFD_MAIN_PLANE,					// Draw in main plane
		0,								// Not used to select mode
		0,0,0 };						// Not used to select mode

	// Choose a pixel format that best matches that described in pfd
	nPixelFormat = ChoosePixelFormat(m_hDC, &pfd);

	// Set the pixel format for the device context
	VERIFY(SetPixelFormat(m_hDC, nPixelFormat, &pfd));

	// Create the rendering context
	m_hRC = wglCreateContext(m_hDC);

	// Make the rendering context current, perform initialization, then
	// deselect it
	VERIFY(wglMakeCurrent(m_hDC,m_hRC));
	
	wglMakeCurrent(NULL,NULL);

	// Create the palette if needed
	InitializePalette();
}


// Initializes the CPalette object
void CGLView::InitializePalette(void)
{

	PIXELFORMATDESCRIPTOR pfd;
    LOGPALETTE* pPal;
    int pixelFormat = GetPixelFormat(m_hDC);
    int paletteSize;

    DescribePixelFormat(m_hDC, pixelFormat, sizeof(PIXELFORMATDESCRIPTOR), &pfd);

    /*
    ** Determine if a palette is needed and if so what size.
    */
    if (pfd.dwFlags & PFD_NEED_PALETTE) 
	{
		paletteSize = 1 << pfd.cColorBits;
    }else 
	if (pfd.iPixelType == PFD_TYPE_COLORINDEX) 
	{
		paletteSize = 4096;
    }else 
	{
		return;
    }

    pPal = (LOGPALETTE*)
	malloc(sizeof(LOGPALETTE) + paletteSize * sizeof(PALETTEENTRY));
    pPal->palVersion = 0x300;
    pPal->palNumEntries = paletteSize;

    if (pfd.iPixelType == PFD_TYPE_RGBA) 
	{
		/*
		** Fill the logical paletee with RGB color ramps
		*/
		int redMask = (1 << pfd.cRedBits) - 1;
		int greenMask = (1 << pfd.cGreenBits) - 1;
		int blueMask = (1 << pfd.cBlueBits) - 1;
		int i;

		for (i=0; i<paletteSize; ++i) 
		{
			pPal->palPalEntry[i].peRed =
				(((i >> pfd.cRedShift) & redMask) * 255) / redMask;
			pPal->palPalEntry[i].peGreen =
				(((i >> pfd.cGreenShift) & greenMask) * 255) / greenMask;
			pPal->palPalEntry[i].peBlue =
				(((i >> pfd.cBlueShift) & blueMask) * 255) / blueMask;
			pPal->palPalEntry[i].peFlags = 0;
		}
    }else 
	{
		int numRamps = NUM_COLORS;
		int rampSize = (paletteSize - 20) / numRamps;
		int extra = (paletteSize - 20) - (numRamps * rampSize);
		int i, r;

		GetSystemPaletteEntries(m_hDC, 0, paletteSize, &pPal->palPalEntry[0]);

		for (r=0; r<numRamps; ++r) 
		{
			int rampBase = r * rampSize + 10;
			PALETTEENTRY *pe = &pPal->palPalEntry[rampBase];
			int diffSize = (int) (rampSize * colorv[r].ratio);
			int specSize = rampSize - diffSize;

			for (i=0; i<rampSize; ++i) 
			{
				GLfloat *c0, *c1;
				GLint a;
	
				if (i < diffSize) 
				{
					c0 = colorv[r].amb;
					c1 = colorv[r].diff;
					a = (i * 255) / (diffSize - 1);
				}else 
				{
					c0 = colorv[r].diff;
					c1 = colorv[r].spec;
					a = ((i - diffSize) * 255) / (specSize - 1);
				}

				pe[i].peRed = (BYTE) (a * (c1[0] - c0[0]) + 255 * c0[0]);
				pe[i].peGreen = (BYTE) (a * (c1[1] - c0[1]) + 255 * c0[1]);
				pe[i].peBlue = (BYTE) (a * (c1[2] - c0[2]) + 255 * c0[2]);
				pe[i].peFlags = PC_NOCOLLAPSE;
			}

			colorv[r].indexes[0] = rampBase;
			colorv[r].indexes[1] = rampBase + (diffSize-1);
			colorv[r].indexes[2] = rampBase + (rampSize-1);
		}

		for (i=0; i<extra; ++i) 
		{
			int index = numRamps*rampSize+10+i;
			PALETTEENTRY *pe = &pPal->palPalEntry[index];

			pe->peRed = (BYTE) 0;
			pe->peGreen = (BYTE) 0;
			pe->peBlue = (BYTE) 0;
		    pe->peFlags = PC_NOCOLLAPSE;
		}
    }

   m_hPalette2 = CreatePalette(pPal);
   free(pPal);

    if(m_hPalette2) 
	{
		SelectPalette(m_hDC, m_hPalette2, FALSE);
		RealizePalette(m_hDC);
    }		
	
}

BOOL CGLView::EnableRC(HDC m_hDC, HGLRC m_hRC, BOOL bEnable)
{
	if(bEnable)
	{
		if(!wglMakeCurrent(m_hDC, m_hRC))
		{
			CString err("CGLView::EnableRC - wglMakeCurrent failed\n");
			MessageBox(0, err, "OpenGL ERROR", MB_OK);
			return FALSE;
		}
	}
	else
		wglMakeCurrent(NULL, NULL);

	return TRUE;
}



BOOL CGLView::QueryNewPalette() 
{
	int nRet;
	// If the palette was created.
	if((HPALETTE)m_GLPalette)
	{
		// Selects the palette into the current device context
		SelectPalette(m_hDC, (HPALETTE)m_GLPalette, FALSE);

		// Map entries from the currently selected palette to
		// the system palette.  The return value is the number 
		// of palette entries modified.
		nRet = RealizePalette(m_hDC);

		// Repaint, forces remap of palette in current window
		ptrWnd->InvalidateRect(NULL,FALSE);

	}
	return nRet;
}

void CGLView::PaletteChanged() 
{
	
		// Select the palette into the device context
		SelectPalette(m_hDC,(HPALETTE)m_GLPalette,FALSE);

		// Map entries to system palette
		RealizePalette(m_hDC);
				
		// Remap the current colors to the newly realized palette
		UpdateColors(m_hDC);
}

void CGLView::RenderScene(GLenum mode)
{
	// Clear the window
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	if(m_antialias)
	{
		glEnable (GL_LINE_SMOOTH);
		glEnable (GL_BLEND);
		glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		glHint (GL_LINE_SMOOTH_HINT, GL_NICEST);
	    glLineWidth (1.125);
		glDepthFunc(GL_LESS);
		glEnable(GL_DEPTH_TEST);
	}
	else
	{
		glDisable (GL_LINE_SMOOTH);
		glLineWidth (1);
		glDisable (GL_BLEND);
	}

	glPushMatrix();

	//Scene and View Rotations
	glRotatef(xRot,1,0,0);		//I am not happy with this b'cos the rotations are always
	glRotatef(yRot,0,1,0);		//about the origin and not about the screen center but
	glRotatef(zRot,0,0,1);		//haven,t yet found out any other method

if(gridOn==true)
{
grid.ShowGrid();
}
if(gridOn==false)
{
grid.HideGrid();
}

GLfloat  ambient_light[] = {1, 1, 1, 1.0};
GLfloat   source_light[] = {1, 0.0, 0.0, 1.0};
GLfloat      light_pos[] = {0.400, 0.300, 200, 5.0};
glEnable       ( GL_LIGHTING );
   glLightModelfv ( GL_LIGHT_MODEL_AMBIENT,ambient_light );
   glLightfv      ( GL_LIGHT0,GL_DIFFUSE,source_light );
   glLightfv      ( GL_LIGHT0,GL_POSITION,light_pos );
   glEnable       ( GL_LIGHT0 );

 glEnable(GL_DEPTH_TEST);
   glEnable(GL_CULL_FACE);
   
   // Rendering mode
   glFrontFace(GL_CCW);
   glPolygonMode(GL_FRONT, GL_FILL);
   // Enable material properties for lighting
   glEnable        ( GL_COLOR_MATERIAL );
   glColorMaterial ( GL_FRONT, GL_AMBIENT_AND_DIFFUSE );

   CPoint3D lightposition;
   lightposition.SetParam(-1700.0, -1700, 1700);
   lightposition.DrawPoint();
  

c1.Rotate(joint0.rotaxis,rotval3);

c1.Rotate(joint1.rotaxis,rotval);
c2.Rotate(joint1.rotaxis,rotval);
c3.Rotate(joint1.rotaxis,rotval);


c1.Rotate(joint2.rotaxis,rotval1);
c2.Rotate(joint2.rotaxis,rotval1);
c3.Rotate(joint2.rotaxis,rotval1);


c1.Rotate(az,rotval2);
c2.Rotate(az,rotval2);
c3.Rotate(az,rotval2);

CPoint3D npos=joint1.rotaxis.GetPosition();
CPoint3D mpos=joint2.rotaxis.GetPosition();
CPoint3D opos=joint0.rotaxis.GetPosition();

CVector3D nvect,mvect;

nvect=joint1.rotaxis.GetDirection();
mvect=joint2.rotaxis.GetDirection();
//ovect=joint0.rotaxis.GetDirection();

npos.Rotate(joint2.rotaxis,rotval1);
nvect.Rotate(joint2.rotaxis,rotval1);
g1.Rotate(joint1.rotaxis,rotval);
g2.Rotate(joint1.rotaxis,rotval);

g1.Rotate(joint2.rotaxis,rotval1);
g2.Rotate(joint2.rotaxis,rotval1);

g1.Rotate(az,rotval2);
g2.Rotate(az,rotval2);

glBegin(GL_LINES);
glVertex3f(g1.GetX(),g1.GetY(),g1.GetZ());
glVertex3f(g2.GetX(),g2.GetY(),g2.GetZ());
glEnd();
opos.Rotate(joint1.rotaxis,rotval);
//ovect.Rotate(joint1.rotaxis,rotval);
opos.Rotate(joint2.rotaxis,rotval1);
//ovect.Rotate(joint2.rotaxis,rotval1);
opos.Rotate(az,rotval2);
//ovect.Rotate(az,rotval2);
CVector3D ovect(g1,g2);

npos.Rotate(az,rotval2);
mpos.Rotate(az,rotval2);
nvect.Rotate(az,rotval2);
mvect.Rotate(az,rotval2);


c4.Rotate(joint2.rotaxis,rotval1);
c4.Rotate(az,rotval2);
c5.Rotate(az,rotval2);



joint1.rotaxis.SetPosition(npos);
joint1.rotaxis.SetDirection(nvect);
joint2.rotaxis.SetPosition(mpos);
joint2.rotaxis.SetDirection(mvect);
joint0.rotaxis.SetDirection(ovect);
joint0.rotaxis.SetPosition(opos);






c1.DrawComponent();
c2.DrawComponent();
c3.DrawComponent();
c6.DrawComponent();
c5.DrawComponent();
c4.DrawComponent();
c1.Hilite();
glColor3f(0,1,0);

joint0.rotaxis.Indicate(joint0.rotaxis);
joint1.rotaxis.Indicate(joint1.rotaxis);
joint2.rotaxis.Indicate(joint2.rotaxis);

//	


glColor3f(1,0,0);
ax.Indicate(ax);
glColor3f(0,1,0);
ax.Indicate(ay);
glColor3f(0,0,1);
ax.Indicate(az);



	glPopMatrix();

	glFlush();
}

void CGLView::ZoomView(CPoint dPoint, CPoint mPoint)
{
	if(!ZoomON)
		DownPoint = dPoint;
	ZoomON = true;

	if(DownPoint.x > mPoint.x || DownPoint.y < mPoint.y)
		nRange *= 1.05;
	else
		nRange /= 1.05;

	DownPoint = mPoint;

	CRect rect;
	ptrWnd->GetClientRect(&rect);

	int w = rect.Width();
	int h = rect.Height();

	ReSize(w, h);

}

void CGLView::PanView(CPoint dPoint, CPoint mPoint)
{
	if(!PanON)
		DownPoint = dPoint;
	PanON = true;
	CSize pan = DownPoint - mPoint;
	DownPoint = mPoint;	
	xTrans -= 0.005*nRange/2*pan.cx;
	yTrans += 0.005*nRange/2*pan.cy;

	DownPoint = mPoint;

	CRect rect;
	ptrWnd->GetClientRect(&rect);

	int w = rect.Width();
	int h = rect.Height();

	ReSize(w, h);
}

void CGLView::RotateView(CPoint dPoint, CPoint mPoint)
{
	if(!RotON)
		DownPoint = dPoint;
	RotON = true;
	CSize rotate = DownPoint - mPoint;
	yRot -= rotate.cx/2;
	xRot -= rotate.cy/2;
	DownPoint = mPoint;
}


void CGLView::TopView() 
{
	// TODO: Add your command handler code here
	xRot = 0;
	yRot = 0;
	zRot = 0;
	Refresh();
}

void CGLView::BottomView() 
{
	// TODO: Add your command handler code here
	xRot = -180;
	yRot = 0;
	zRot = 0;
	Refresh();
}

void CGLView::FrontView() 
{
	// TODO: Add your command handler code here
	xRot = -90;
	yRot = 0;
	zRot = 0;
	Refresh();
}

void CGLView::BackView() 
{
	// TODO: Add your command handler code here
	xRot = -90;
	yRot = 0;
	zRot = -180;
	Refresh();
}

void CGLView::LeftView() 
{
	// TODO: Add your command handler code here
	xRot = -90;
	yRot = 0;
	zRot = -90;
	Refresh();
}

void CGLView::RightView() 
{
	// TODO: Add your command handler code here
	xRot = -90;
	yRot = 0;
	zRot = 90;
	Refresh();
}

void CGLView::AxonView() 
{
	// TODO: Add your command handler code here
	xRot = -45;
	yRot = 0;
	zRot = -45;
	Refresh();
}

void CGLView::FitAll() 
{
	// TODO: Add your command handler code here
	
	FitView();
	CRect rect;
	ptrWnd->GetClientRect(&rect);

	int w = rect.Width();
	int h = rect.Height();

	ReSize(w, h);

	Refresh();
}

void CGLView::ZoomWindow(CRect zcRect)
{		
	CRect rcRect;
	ptrWnd->GetClientRect(&rcRect);

	int rcWidth, rcHeight, zcWidth, zcHeight;
	CPoint rcCentre, zcCentre;
	int dx, dy, dw, dh;
	GLdouble wRatio, hRatio;
	GLdouble dRange;

	GLint viewport[4];
	GLdouble mvmatrix[16],projmatrix[16];
	GLint realy;

	GLdouble cx, cy, cz;
	GLdouble mx, my, mz;

	rcWidth = rcRect.Width();
	rcHeight = rcRect.Height();

	zcWidth = zcRect.Width();
	zcHeight = zcRect.Height();

	rcCentre = rcRect.CenterPoint();
	zcCentre = zcRect.CenterPoint();

	wglMakeCurrent(m_hDC,m_hRC);
	glPushMatrix();
	glGetIntegerv(GL_VIEWPORT,viewport);
	glGetDoublev(GL_MODELVIEW_MATRIX,mvmatrix);
	glGetDoublev(GL_PROJECTION_MATRIX,projmatrix);

	realy=viewport[3]-(GLint)zcCentre.y-1;
	gluUnProject((GLdouble)zcCentre.x, (GLdouble)realy, 0.5, mvmatrix, projmatrix, viewport,
				&mx, &my, &mz);

	realy=viewport[3]-(GLint)rcCentre.y-1;
	gluUnProject((GLdouble)rcCentre.x, (GLdouble)realy, 0.5, mvmatrix, projmatrix, viewport,
				&cx, &cy, &cz);

	glPopMatrix();

	dx = cx - mx;
	dy = cy - my;

	dw = rcWidth - zcWidth;
	dh = rcHeight - zcHeight;

	wRatio = (GLdouble) zcWidth/rcWidth;
	hRatio = (GLdouble) zcHeight/rcHeight;

	dRange = (wRatio < hRatio) ? hRatio : wRatio;

	nRange *= dRange/0.8;

	xTrans += dx;
	yTrans += dy;

	wglMakeCurrent(NULL,NULL);

	ReSize(rcWidth, rcHeight);

	Refresh();
}

void CGLView::ResetView() 
{
	// TODO: Add your command handler code here
	xRot = -45;
	yRot = 0;
	zRot = -45;
	xTrans = 0;
	yTrans = 0;
	zTrans = 0;
	nRange = 500;

	CRect rect;
	ptrWnd->GetClientRect(&rect);

	int w = rect.Width();
	int h = rect.Height();

	ReSize(w, h);

	Refresh();
}

void CGLView::SetBackgroundColor(GLfloat r, GLfloat g, GLfloat b)
{
	m_bkRed = r;
	m_bkGreen = g;
	m_bkBlue = b;
	wglMakeCurrent(m_hDC, m_hRC);
	glClearColor(m_bkRed, m_bkGreen, m_bkBlue, 1.0f);
	::wglMakeCurrent(NULL, NULL);
	ptrWnd->InvalidateRect(NULL, FALSE);
}



void CGLView::SetAntiAliasing(const bool& mode)
{
	m_antialias = mode;
	ptrWnd->InvalidateRect(NULL, FALSE);
}

void CGLView::PointToScreen(const CPoint3D& P, int& x, int& y)
{
	CPoint3D p = P;
	GLint viewport[4];
	GLdouble mvmatrix[16],projmatrix[16];
	GLdouble wx, wy, wz;
	::wglMakeCurrent(m_hDC,m_hRC);
	glPushMatrix();
	glRotatef(xRot, 1.0f, 0.0f, 0.0f);
	glRotatef(yRot, 0.0f, 1.0f, 0.0f);
	glRotatef(zRot, 0.0f, 0.0f, 1.0f);
	glGetIntegerv(GL_VIEWPORT,viewport);
	glGetDoublev(GL_MODELVIEW_MATRIX,mvmatrix);
	glGetDoublev(GL_PROJECTION_MATRIX,projmatrix);
	gluProject((GLdouble)p.GetX(), p.GetY(), p.GetZ(), mvmatrix, projmatrix, viewport,
				&wx, &wy, &wz);
	wx = round((long double)wx);
	wy = round((long double)wy);
	x = (int)wx; y = (int)wy;
	glPopMatrix();
	::wglMakeCurrent(NULL,NULL);
}

void CGLView::ScreenToPoint(const int& x, const int& y, CPoint3D&  P)
{
	CPoint point(x,y);
	GLint viewport[4];
	GLdouble mvmatrix[16],projmatrix[16];
	GLint realy;
	GLdouble wx, wy, wz;
	::wglMakeCurrent(m_hDC,m_hRC);
	glPushMatrix();
	glRotatef(xRot, 1.0f, 0.0f, 0.0f);
	glRotatef(yRot, 0.0f, 1.0f, 0.0f);
	glRotatef(zRot, 0.0f, 0.0f, 1.0f);
	glGetIntegerv(GL_VIEWPORT,viewport);
	glGetDoublev(GL_MODELVIEW_MATRIX,mvmatrix);
	glGetDoublev(GL_PROJECTION_MATRIX,projmatrix);
	realy=viewport[3]-(GLint)point.y-1;
	gluUnProject((GLdouble)point.x, (GLdouble)realy, 0.5, mvmatrix, projmatrix, viewport,
				&wx, &wy, &wz);
	P.SetParam(wx, wy, wz);
	glPopMatrix();
	::wglMakeCurrent(NULL,NULL);
}

void CGLView::FitView()
{
	GLint viewport[4];
	GLdouble mvmatrix[16],projmatrix[16];
	CRect volRect;
	GLdouble cx, cy, cz;
	GLdouble mx, my, mz;
	GLdouble lx, ly, lz, sx, sy, sz;

	wglMakeCurrent(m_hDC, m_hRC);
	glPushMatrix();

	glRotatef(xRot, 1.0f, 0.0f, 0.0f);
	glRotatef(yRot, 0.0f, 1.0f, 0.0f);
	glRotatef(zRot, 0.0f, 0.0f, 1.0f);

	glGetIntegerv(GL_VIEWPORT,viewport);
	glGetDoublev(GL_MODELVIEW_MATRIX,mvmatrix);
	glGetDoublev(GL_PROJECTION_MATRIX,projmatrix);

	gluProject(lx, ly, lz, mvmatrix, projmatrix, viewport,
				&mx, &my, &mz);

	gluProject(sx, sy, sz, mvmatrix, projmatrix, viewport,
				&cx, &cy, &cz);

	glPopMatrix();
	::wglMakeCurrent(NULL, NULL);

	volRect.SetRect(cx,cy,mx,my);
	volRect.NormalizeRect();

	Fit3d(volRect);
}


void CGLView::Fit3d(CRect rect)
{	
	CRect zcRect = rect;
	CRect rcRect;
	ptrWnd->GetClientRect(&rcRect);

	int rcWidth, rcHeight, zcWidth, zcHeight;
	CPoint rcCentre, zcCentre;
	int dx, dy, dw, dh;
	GLdouble wRatio, hRatio;
	GLdouble dRange;

	GLint viewport[4];
	GLdouble mvmatrix[16],projmatrix[16];
	GLint realy;

	GLdouble cx, cy, cz;
	GLdouble mx, my, mz;

	rcWidth = rcRect.Width();
	rcHeight = rcRect.Height();

	zcWidth = zcRect.Width();
	zcHeight = zcRect.Height();

	rcCentre = rcRect.CenterPoint();
	zcCentre = zcRect.CenterPoint();

	::wglMakeCurrent(m_hDC, m_hRC);

	glPushMatrix();

	glGetIntegerv(GL_VIEWPORT,viewport);
	glGetDoublev(GL_MODELVIEW_MATRIX,mvmatrix);
	glGetDoublev(GL_PROJECTION_MATRIX,projmatrix);

	realy=viewport[3]-(GLint)zcCentre.y-1;
	gluUnProject((GLdouble)zcCentre.x, (GLdouble)realy, 0.5, mvmatrix, projmatrix, viewport,
				&mx, &my, &mz);

	realy=viewport[3]-(GLint)rcCentre.y-1;
	gluUnProject((GLdouble)rcCentre.x, (GLdouble)realy, 0.5, mvmatrix, projmatrix, viewport,
				&cx, &cy, &cz);

	glPopMatrix();

	::wglMakeCurrent(NULL, NULL);

	dx = cx - mx;
	dy = cy - my;

	dw = rcWidth - zcWidth;
	dh = rcHeight - zcHeight;

	wRatio = (GLdouble) zcWidth/rcWidth;
	hRatio = (GLdouble) zcHeight/rcHeight;

	dRange = (wRatio < hRatio) ? hRatio : wRatio;

	nRange *= dRange/(double)0.8;

	xTrans += dx;
	yTrans -= dy;
}


void CGLView::OrthoView()
{
xRot = -45.0f;
	yRot = 0;
	zRot = -45.0f;
	Refresh();
}

void CGLView::OrthoView1()
{
xRot = -45.0f;
	yRot = 0.0f;
	zRot = +45.0f;
	Refresh();
}

void CGLView::OrthoView2()
{
xRot = -45.0f;
	yRot = 0.0f;
	zRot = +135.0f;
	Refresh();
}

void CGLView::OrthoView3()
{
xRot = -45.0f;
	yRot = 0.0f;
	zRot = +225.0f;
	Refresh();
}

void CGLView::ShowRuler(BOOL x, BOOL y, BOOL z, int xscale, int yscale, int zscale)
{

}
